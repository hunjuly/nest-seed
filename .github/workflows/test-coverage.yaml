name: Test and Coverage

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest

        container: node:lts-alpine

        services:
            nest-seed-db:
                image: postgres:15
                env:
                    POSTGRES_USER: testuser
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: nestdb
                    POSTGRES_SCHEMA: nest_schema

            nest-redis:
                image: redis

        env:
            NODE_ENV: development

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Install Tools
              run: apk add -f jq bash bash-doc bash-completion postgresql

            - name: Create logs folder
              run: mkdir -p ./logs

            - name: Install Dependencies
              run: npm install

            - name: set allow schema reset
              run: bash scripts/set_allow_schema_reset.sh

            - name: Init DB
              run: bash scripts/init_database.sh

            - name: Run Tests and Coverage
              run: npm run test:all

            - name: Check Coverage and Send Email If Below 100%
              run: |
                  if [ ! -f ./coverage/coverage-summary.json ]; then
                      echo "coverage-summary.json does not exist"
                      exit 1
                  fi

                  COVERAGE_LINES=$(jq '.total.lines.pct' ./coverage/coverage-summary.json)
                  COVERAGE_STATEMENTS=$(jq '.total.statements.pct' ./coverage/coverage-summary.json)
                  COVERAGE_FUNCTIONS=$(jq '.total.functions.pct' ./coverage/coverage-summary.json)
                  COVERAGE_BRANCHES=$(jq '.total.branches.pct' ./coverage/coverage-summary.json)
                  COVERAGE_BRANCHES_TRUE=$(jq '.total.branchesTrue.pct' ./coverage/coverage-summary.json)

                  if [ -z "$COVERAGE_LINES" ] ||
                      [ -z "$COVERAGE_STATEMENTS" ] ||
                      [ -z "$COVERAGE_FUNCTIONS" ] ||
                      [ -z "$COVERAGE_BRANCHES" ] ||
                      [ -z "$COVERAGE_BRANCHES_TRUE" ]; then
                      echo "One of the coverage metrics is missing in the JSON file."
                      exit 1
                  fi

                  if (($(echo "$COVERAGE_LINES < 100" | bc -l))) ||
                      (($(echo "$COVERAGE_STATEMENTS < 100" | bc -l))) ||
                      (($(echo "$COVERAGE_FUNCTIONS < 100" | bc -l))) ||
                      (($(echo "$COVERAGE_BRANCHES < 100" | bc -l))) ||
                      (($(echo "$COVERAGE_BRANCHES_TRUE < 100" | bc -l))); then

                      echo "One of the coverage metrics is below 100%, failing the workflow."
                      exit 1
                  fi
